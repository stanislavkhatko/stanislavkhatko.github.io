<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://stanislavkhatko.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://stanislavkhatko.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-06-04T22:45:33+00:00</updated><id>https://stanislavkhatko.github.io/feed.xml</id><title type="html">blank</title><subtitle>My portfolio and blog website. </subtitle><entry><title type="html">PHP cheatsheet</title><link href="https://stanislavkhatko.github.io/blog/2024/php-cheatsheet/" rel="alternate" type="text/html" title="PHP cheatsheet"/><published>2024-05-13T20:32:00+00:00</published><updated>2024-05-13T20:32:00+00:00</updated><id>https://stanislavkhatko.github.io/blog/2024/php-cheatsheet</id><content type="html" xml:base="https://stanislavkhatko.github.io/blog/2024/php-cheatsheet/"><![CDATA[<p>List of useful PHP.</p> <p>Exit the file, string inside gets echoed</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">die</span><span class="p">(</span><span class="s2">"This file is not meant to be ran. ¯\_(ツ)_/¯"</span><span class="p">);</span>
<span class="k">exit</span><span class="p">(</span><span class="s2">"This file is not meant to be ran. ¯\_(ツ)_/¯"</span><span class="p">);</span>
</code></pre></div></div> <p>Printing</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">echo</span> <span class="s2">""</span><span class="p">;</span> <span class="c1">// Print a string or type that can be made into a string(I.E int, float).</span>
<span class="nb">print_r</span><span class="p">(</span><span class="nv">$arr</span><span class="p">);</span> <span class="c1">// Print anything, with type hints for array's and object's</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$arr</span><span class="p">);</span> <span class="c1">// Print anything, with type hints for any value and sizes</span>
</code></pre></div></div> <p>Useful string manipulation methods</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$string</span> <span class="o">=</span> <span class="s1">'Awesome cheatsheets'</span><span class="p">;</span>

<span class="nf">str_contains</span><span class="p">(</span><span class="nv">$string</span><span class="p">,</span> <span class="s1">'cheat'</span><span class="p">);</span> <span class="c1">// Find if the string contains the specified string (PHP &gt;= 8.0)</span>
<span class="nb">str_replace</span><span class="p">(</span><span class="s1">'Awesome'</span><span class="p">,</span> <span class="s1">'Bonjour'</span><span class="p">,</span> <span class="nv">$string</span><span class="p">);</span> <span class="c1">// Replace all occurrence</span>
<span class="nb">strcmp</span><span class="p">(</span><span class="nv">$string</span><span class="p">,</span> <span class="s1">'Awesome cheatsheets'</span><span class="p">);</span> <span class="c1">// Compare two strings</span>
<span class="nb">strpos</span><span class="p">(</span><span class="nv">$string</span><span class="p">,</span> <span class="s1">'a'</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// Get position in the string</span>
<span class="nb">str_split</span><span class="p">(</span><span class="nv">$string</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// Split the string</span>
<span class="nb">strrev</span><span class="p">(</span><span class="nv">$string</span><span class="p">);</span> <span class="c1">// Reverse a string</span>
<span class="nb">trim</span><span class="p">(</span><span class="nv">$string</span><span class="p">);</span> <span class="c1">// Strip whitespace from the beginning and end of a string</span>
<span class="nb">ucfirst</span><span class="p">(</span><span class="nv">$string</span><span class="p">);</span> <span class="c1">// Make a string's first character uppercase</span>
<span class="nb">lcfirst</span><span class="p">(</span><span class="nv">$string</span><span class="p">);</span> <span class="c1">// Make a string's first character lowercase</span>
<span class="nb">substr</span><span class="p">(</span><span class="nv">$string</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="c1">// Return part of a string</span>
</code></pre></div></div> <h3 id="declaring-an-array">Declaring an Array</h3> <p>Indexed Array</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$arr</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">"John"</span><span class="p">,</span> <span class="s2">"Doe"</span><span class="p">,</span> <span class="s2">"Lorem"</span><span class="p">,</span> <span class="s2">"Ipsum"</span><span class="p">);</span>
</code></pre></div></div> <p>Associative Array</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$arr</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">"John"</span><span class="o">=&gt;</span><span class="s2">"10"</span><span class="p">,</span> <span class="s2">"Doe"</span><span class="o">=&gt;</span><span class="s2">"200"</span><span class="p">,</span> <span class="s2">"Doe"</span><span class="o">=&gt;</span><span class="s2">"3000"</span><span class="p">,</span> <span class="s2">"Ipsum"</span><span class="o">=&gt;</span><span class="s2">"40000"</span><span class="p">);</span>
</code></pre></div></div> <p>Multidimensional Arrays</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$arr</span> <span class="o">=</span> <span class="k">array</span> <span class="p">(</span>
    <span class="k">array</span><span class="p">(</span><span class="s2">"John"</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">180</span><span class="p">),</span>
    <span class="k">array</span><span class="p">(</span><span class="s2">"Doe"</span><span class="p">,</span><span class="mi">150</span><span class="p">,</span><span class="mi">130</span><span class="p">),</span>
    <span class="k">array</span><span class="p">(</span><span class="s2">"Lorem"</span><span class="p">,</span><span class="mi">500</span><span class="p">,</span><span class="mi">200</span><span class="p">),</span>
    <span class="k">array</span><span class="p">(</span><span class="s2">"Ipsum"</span><span class="p">,</span><span class="mi">170</span><span class="p">,</span><span class="mi">150</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div> <p>Declaring array with short syntax</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$arr</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"John"</span><span class="p">,</span> <span class="s2">"Doe"</span><span class="p">,</span> <span class="s2">"Lorem"</span><span class="p">,</span> <span class="s2">"Ipsum"</span><span class="p">];</span> <span class="c1">// Indexed Array</span>
<span class="nv">$arr</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"John"</span><span class="o">=&gt;</span><span class="s2">"10"</span><span class="p">,</span> <span class="s2">"Doe"</span><span class="o">=&gt;</span><span class="s2">"200"</span><span class="p">,</span> <span class="s2">"Doe"</span><span class="o">=&gt;</span><span class="s2">"3000"</span><span class="p">,</span> <span class="s2">"Ipsum"</span><span class="o">=&gt;</span><span class="s2">"40000"</span><span class="p">];</span> <span class="c1">// Associative Array</span>
<span class="nv">$arr</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="s2">"John"</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">180</span><span class="p">],</span>
    <span class="p">[</span><span class="s2">"Doe"</span><span class="p">,</span><span class="mi">150</span><span class="p">,</span><span class="mi">130</span><span class="p">],</span>
    <span class="p">[</span><span class="s2">"Lorem"</span><span class="p">,</span><span class="mi">500</span><span class="p">,</span><span class="mi">200</span><span class="p">],</span>
    <span class="p">[</span><span class="s2">"Ipsum"</span><span class="p">,</span><span class="mi">170</span><span class="p">,</span><span class="mi">150</span><span class="p">],</span> <span class="c1">// You can have a "," at the end without throwing syntax errors</span>
<span class="p">];</span>
</code></pre></div></div> <p>Sorting an Array</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sort</span><span class="p">(</span><span class="nv">$arr</span><span class="p">);</span> <span class="c1">// Sort arrays in ascending order.</span>
<span class="nb">rsort</span><span class="p">(</span><span class="nv">$arr</span><span class="p">);</span> <span class="c1">// Sort arrays in descending order.</span>
<span class="nb">asort</span><span class="p">(</span><span class="nv">$arr</span><span class="p">);</span> <span class="c1">// Sort associative arrays in ascending order, according to the value.</span>
<span class="nb">ksort</span><span class="p">(</span><span class="nv">$arr</span><span class="p">);</span> <span class="c1">// Sort associative arrays in ascending order, according to the key.</span>
<span class="nb">arsort</span><span class="p">(</span><span class="nv">$arr</span><span class="p">);</span> <span class="c1">// Sort associative arrays in descending order, according to the value.</span>
<span class="nb">krsort</span><span class="p">(</span><span class="nv">$arr</span><span class="p">);</span> <span class="c1">// Sort associative arrays in descending order, according to the key.</span>
</code></pre></div></div> <h3 id="conditions">Conditions</h3> <p>If/Elseif/Else</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="nv">$i</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>

<span class="p">}</span> <span class="k">elseif</span><span class="p">(</span> <span class="nv">$i</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">)</span> <span class="p">{</span>

<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div> <p>Ternary</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$string</span> <span class="o">=</span> <span class="nv">$state</span> <span class="o">==</span> <span class="s1">'Running'</span> <span class="o">?</span> <span class="s1">'He is running'</span> <span class="o">:</span> <span class="s1">'I don\'t know'</span><span class="p">;</span>
</code></pre></div></div> <p>Null coalescing</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$string</span> <span class="o">=</span> <span class="nv">$startDate</span> <span class="o">??</span> <span class="s1">''</span><span class="p">;</span>
</code></pre></div></div> <p>Ways of looping</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">continue</span><span class="p">;</span> <span class="c1">// Skip current iter</span>
<span class="k">break</span><span class="p">;</span> <span class="c1">// Exit loop</span>
</code></pre></div></div> <p>Foreach</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">foreach</span><span class="p">(</span><span class="nv">$arr</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$key</span><span class="p">;</span>
    <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>For</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$arr</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$i</span><span class="p">;</span>
    <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$arr</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div> <p>While</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">while</span><span class="p">(</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$arr</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$i</span><span class="p">;</span>
    <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$arr</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div> <p>Do while</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">do</span> <span class="p">{</span>
    <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$i</span><span class="p">;</span>
    <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$arr</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
<span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$arr</span><span class="p">));</span>
</code></pre></div></div> <p>Switch</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span><span class="p">(</span><span class="nv">$arr</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="global-variables">Global variables</h3> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$_SERVER</span><span class="p">;</span> <span class="c1">// SERVER variables</span>
<span class="nv">$_GET</span><span class="p">;</span> <span class="c1">// Query params</span>
<span class="nv">$_POST</span><span class="p">;</span> <span class="c1">// Post fields</span>
<span class="nv">$_REQUEST</span><span class="p">;</span> <span class="c1">// GET and POST together</span>
<span class="nv">$GLOBALS</span><span class="p">;</span> <span class="c1">// Array of global variables</span>
<span class="nv">$_SESSION</span><span class="p">;</span> <span class="c1">// Browser session</span>
<span class="nv">$_FILES</span><span class="p">;</span> <span class="c1">// Array of files that are sent in request</span>
<span class="nv">$_COOKIE</span><span class="p">;</span> <span class="c1">// Array of cookies sent in request</span>
<span class="nv">$_ENV</span><span class="p">;</span> <span class="c1">// php.ini options</span>
<span class="nv">$argv</span><span class="p">;</span> <span class="c1">// Array of terminal arguments (filename included)</span>
<span class="nv">$argc</span><span class="p">;</span> <span class="c1">// Number of arguments passed into terminal</span>
</code></pre></div></div> <h3 id="functions">Functions</h3> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
 <span class="c1">// Simple function</span>
 <span class="k">function</span> <span class="n">name</span><span class="p">(</span><span class="nv">$parameter</span><span class="p">);</span>

 <span class="c1">// Function with return type (void, int, float, string, array, object, mixed)</span>
 <span class="k">function</span> <span class="n">name</span><span class="p">(</span><span class="nv">$parameter</span><span class="p">)</span> <span class="p">:</span> <span class="kt">void</span><span class="p">;</span>

 <span class="c1">// Function with optional parameter</span>
 <span class="k">function</span> <span class="n">name</span><span class="p">(</span><span class="nv">$parameter</span> <span class="o">=</span> <span class="s1">''</span><span class="p">)</span> <span class="p">:</span> <span class="kt">string</span><span class="p">;</span>

 <span class="c1">// Function with typed parameter (? means "can be null")</span>
 <span class="k">function</span> <span class="n">name</span><span class="p">(</span><span class="kt">?string</span> <span class="nv">$parameter</span><span class="p">)</span> <span class="p">:</span> <span class="kt">?string</span><span class="p">;</span>

 <span class="c1">// Function with union types (PHP &gt;= 8.0)</span>
 <span class="k">function</span> <span class="n">name</span><span class="p">(</span><span class="kt">int</span><span class="o">|</span><span class="n">string</span> <span class="nv">$parameter1</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$parameter2</span><span class="p">)</span> <span class="p">:</span> <span class="kt">int</span><span class="o">|</span><span class="n">string</span><span class="p">;</span>

 <span class="c1">// Function call</span>
 <span class="nf">name</span><span class="p">(</span><span class="s1">'my_parameter'</span><span class="p">);</span>

 <span class="c1">// Null safe operator (PHP &gt;= 8.0)</span>
 <span class="nv">$myObject</span><span class="o">?-&gt;</span><span class="nf">getName</span><span class="p">()</span><span class="o">?-&gt;</span><span class="nf">startWith</span><span class="p">(</span><span class="s1">'A'</span><span class="p">);</span>
</code></pre></div></div> <h3 id="class">Class</h3> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">NormalClass</span> <span class="kd">extends</span> <span class="nc">AbstractClassName</span> <span class="kd">implements</span> <span class="nc">InterfaceName</span>
<span class="p">{</span>

    <span class="kn">use</span> <span class="nc">TraitName</span><span class="p">;</span>

    <span class="c1">// --&gt; PROPERTY TYPES &lt;--</span>

    <span class="cd">/**
     * Public property, everyone can access this property. 
     * @var Type
     */</span>
    <span class="k">public</span> <span class="nv">$property</span><span class="p">;</span>

    <span class="cd">/**
     * Private property, only this instance can access this property.
     * @var Type
     */</span>
    <span class="k">private</span> <span class="nv">$property</span><span class="p">;</span>

    <span class="cd">/**
     * Protected property, this instance and children can access this property.
     * @var Type
     */</span>
    <span class="k">protected</span> <span class="nv">$property</span><span class="p">;</span>

    <span class="cd">/**
     * Static property, is the same for all instances of this class.
     * @var Type
     */</span>
    <span class="k">static</span> <span class="nv">$property</span><span class="p">;</span>

    <span class="c1">// --&gt; FUNCTION TYPES &lt;--</span>

    <span class="cd">/**
     * Public function, everyone can access this function.
     * @param Type
     * @return Type
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">publicFunction</span><span class="p">(</span><span class="kt">Type</span> <span class="nv">$var</span> <span class="o">=</span> <span class="kc">null</span><span class="p">):</span> <span class="kt">Type</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * Private function, only this instance can access this function.
     * @param Type
     * @return Type
     */</span>
    <span class="k">private</span> <span class="k">function</span> <span class="n">privateFunction</span><span class="p">(</span><span class="kt">Type</span> <span class="nv">$var</span> <span class="o">=</span> <span class="kc">null</span><span class="p">):</span> <span class="kt">Type</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * Protected function, this instance and children can access this function.
     * @param Type
     * @return Type
     */</span>
    <span class="k">protected</span> <span class="k">function</span> <span class="n">protectedFunction</span><span class="p">(</span><span class="kt">Type</span> <span class="nv">$var</span> <span class="o">=</span> <span class="kc">null</span><span class="p">):</span> <span class="kt">Type</span>
    <span class="p">{</span>
    <span class="p">}</span>
    
    <span class="cd">/**
     * Static function, doesn't need an instance to be executed.
     * @param Type
     * @return Type
     */</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">staticFunction</span><span class="p">(</span><span class="kt">Type</span> <span class="nv">$var</span> <span class="o">=</span> <span class="kc">null</span><span class="p">):</span> <span class="kt">Type</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="c1">// --&gt; MAGIC METHODS &lt;--</span>

    <span class="cd">/**
     * Gets triggered on creating a new class instance
     * https://php.net/manual/en/language.oop5.decon.php
     * @param Type
     * @return void
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">Type</span> <span class="nv">$var</span> <span class="o">=</span> <span class="kc">null</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * Gets triggered on destruction of a class instance
     * https://php.net/manual/en/language.oop5.decon.php
     * @return void
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__destruct</span><span class="p">()</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * __set() is run when writing data to inaccessible properties.
     * https://php.net/manual/en/language.oop5.overloading.php
     * @param string name
     * @param mixed value
     * @return void
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__set</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$name</span> <span class="p">,</span> <span class="kt">mixed</span> <span class="nv">$value</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * __get() is utilized for reading data from inaccessible properties.
     * https://php.net/manual/en/language.oop5.overloading.php
     * @param string name
     * @return mixed
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__get</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$name</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * __isset() is triggered by calling isset() or empty() on inaccessible properties.
     * https://php.net/manual/en/language.oop5.overloading.php
     * @param string name
     * @return bool
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__isset</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$name</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * __unset() is invoked when unset() is used on inaccessible properties.
     * https://php.net/manual/en/language.oop5.overloading.php
     * @param string name
     * @return void
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__unset</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$name</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * __call is triggered when invoking inaccessible methods in an object context.
     * https://php.net/manual/en/language.oop5.overloading.php
     * @param string name
     * @param array arguments
     * @return mixed
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__call</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$arguments</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * __callStatic() is triggered when invoking inaccessible methods in a static context.
     * https://php.net/manual/en/language.oop5.overloading.php
     * @param string name
     * @param array arguments
     * @return mixed
     */</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">__callStatic</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$arguments</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * https://php.net/manual/en/language.oop5.magic.php
     * @return array
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__sleep</span><span class="p">()</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * https://php.net/manual/en/language.oop5.magic.php
     * @return void
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__wakeup</span><span class="p">()</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * https://php.net/manual/en/language.oop5.magic.php
     * @return string
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__toString</span><span class="p">()</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * https://php.net/manual/en/language.oop5.magic.php
     * @param Type
     * @return mixed
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">Type</span> <span class="nv">$var</span> <span class="o">=</span> <span class="kc">null</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * https://php.net/manual/en/language.oop5.magic.php
     * @param array properties
     * @return object
     */</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">__set_state</span><span class="p">(</span><span class="kt">array</span> <span class="nv">$properties</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * https://php.net/manual/en/language.oop5.magic.php
     * @return array
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__debugInfo</span><span class="p">()</span>
    <span class="p">{</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div> <p>Every class that has implemented this interface need to have the same functions.</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">InterfaceName</span>
<span class="p">{</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">FunctionName</span><span class="p">(</span><span class="kt">Type</span> <span class="nv">$var</span> <span class="o">=</span> <span class="kc">null</span><span class="p">):</span> <span class="kt">Type</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div></div> <p>Combination of class and interface.</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">abstract</span> <span class="kd">class</span> <span class="nc">AbstractClassName</span>
<span class="p">{</span>

    <span class="cd">/**
     * Classes extending this abstract class need to have this function.
     * @param Type
     * @return Type
     */</span>
    <span class="k">abstract</span> <span class="k">function</span> <span class="n">abstractFunction</span><span class="p">(</span><span class="kt">Type</span> <span class="nv">$var</span> <span class="o">=</span> <span class="kc">null</span><span class="p">):</span> <span class="kt">Type</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Basic Implementation of LoggerAwareInterface.</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">trait</span> <span class="nc">LoggerAwareTrait</span>
<span class="p">{</span>
    <span class="cd">/**
     * The logger instance.
     *
     * @var LoggerInterface
     */</span>
    <span class="k">protected</span> <span class="nv">$logger</span><span class="p">;</span>
    <span class="cd">/**
     * Sets a logger.
     *
     * @param LoggerInterface $logger
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">setLogger</span><span class="p">(</span><span class="kt">LoggerInterface</span> <span class="nv">$logger</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">logger</span> <span class="o">=</span> <span class="nv">$logger</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Example with use of LoggerAwareTrait.</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ClassWithLogger</span>
<span class="p">{</span>
    <span class="cd">/**
     * Use the LoggerAwareTrait in this class.
     */</span>
    <span class="kn">use</span> <span class="nc">LoggerAwareTrait</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Originated from <a href="https://github.com/LeCoupa/awesome-cheatsheets">github</a></p>]]></content><author><name></name></author><category term="code"/><category term="php"/><category term="code"/><summary type="html"><![CDATA[Most used and useful PHP functions and methods.]]></summary></entry><entry><title type="html">JavaScript cheatsheet</title><link href="https://stanislavkhatko.github.io/blog/2024/javascript-cheatsheet/" rel="alternate" type="text/html" title="JavaScript cheatsheet"/><published>2024-04-27T23:37:00+00:00</published><updated>2024-04-27T23:37:00+00:00</updated><id>https://stanislavkhatko.github.io/blog/2024/javascript-cheatsheet</id><content type="html" xml:base="https://stanislavkhatko.github.io/blog/2024/javascript-cheatsheet/"><![CDATA[<p>List of useful javaScript.</p> <h4 id="global-objects--object">GLOBAL OBJECTS &gt; OBJECT</h4> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">Mozilla</a></p> <p>Global object: properties</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Object</span><span class="p">.</span><span class="nx">length</span>                                        <span class="c1">// length is a property of a function object, and indicates how many arguments the function expects, i.e. the number of formal parameters. This number does not include the rest parameter. Has a value of 1.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>                                     <span class="c1">// Represents the Object prototype object and allows to add new properties and methods to all objects of type Object.</span>
</code></pre></div></div> <p>Methods of the Object constructor</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Object</span><span class="p">.</span><span class="nf">assign</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="p">...</span><span class="nx">sources</span><span class="p">)</span>                    <span class="c1">// Copies the values of all enumerable own properties from one or more source objects to a target object. method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="nx">MyObject</span><span class="p">)</span>                              <span class="c1">// Creates a new object with the specified prototype object and properties. The object which should be the prototype of the newly-created object.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">prop</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span>         <span class="c1">// Adds the named property described by a given descriptor to an object.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">defineProperties</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span>                  <span class="c1">// Adds the named properties described by the given descriptors to an object.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">entries</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>                                  <span class="c1">// Returns an array containing all of the [key, value] pairs of a given object's own enumerable string properties.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">freeze</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>                                   <span class="c1">// Freezes an object: other code can't delete or change any properties.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">prop</span><span class="p">)</span>           <span class="c1">// Returns a property descriptor for a named property on an object.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">getOwnPropertyDescriptors</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>                <span class="c1">// Returns an object containing all own property descriptors for an object.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">getOwnPropertyNames</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>                      <span class="c1">// Returns an array containing the names of all of the given object's own enumerable and non-enumerable properties.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">getOwnPropertySymbols</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>                    <span class="c1">// Returns an array of all symbol properties found directly upon a given object.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>                           <span class="c1">// Returns the prototype of the specified object.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">is</span><span class="p">(</span><span class="nx">value1</span><span class="p">,</span> <span class="nx">value2</span><span class="p">);</span>                           <span class="c1">// Compares if two values are the same value. Equates all NaN values (which differs from both Abstract Equality Comparison and Strict Equality Comparison).</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">isExtensible</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>                             <span class="c1">// Determines if extending of an object is allowed.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">isFrozen</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>                                 <span class="c1">// Determines if an object was frozen.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">isSealed</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>                                 <span class="c1">// Determines if an object is sealed.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>                                     <span class="c1">// Returns an array containing the names of all of the given object's own enumerable string properties.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">preventExtensions</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>                        <span class="c1">// Prevents any extensions of an object.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">seal</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>                                     <span class="c1">// Prevents other code from deleting properties of an object.</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">setPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">prototype</span><span class="p">)</span>                <span class="c1">// Sets the prototype (i.e., the internal [[Prototype]] property).</span>
<span class="nb">Object</span><span class="p">.</span><span class="nf">values</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>                                   <span class="c1">// Returns an array containing the values that correspond to all of a given object's own enumerable string properties.</span>
</code></pre></div></div> <p>Object instances and Object prototype object (Object.prototype.property or Object.prototype.method()) Properties</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span>                                      <span class="c1">// Specifies the function that creates an object's prototype.</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span>                                        <span class="c1">// Points to the object which was used as prototype when the object was instantiated.</span>
</code></pre></div></div> <p>Methods</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">obj</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="nx">prop</span><span class="p">)</span>                             <span class="c1">// Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.</span>
<span class="nx">prototypeObj</span><span class="p">.</span><span class="nf">isPrototypeOf</span><span class="p">(</span><span class="nx">object</span><span class="p">)</span>                   <span class="c1">// Returns a boolean indicating whether the object this method is called upon is in the prototype chain of the specified object.</span>
<span class="nx">obj</span><span class="p">.</span><span class="nf">propertyIsEnumerable</span><span class="p">(</span><span class="nx">prop</span><span class="p">)</span>                       <span class="c1">// Returns a boolean indicating if the internal ECMAScript [[Enumerable]] attribute is set.</span>
<span class="nx">obj</span><span class="p">.</span><span class="nf">toLocaleString</span><span class="p">()</span>                                 <span class="c1">// Calls toString().</span>
<span class="nx">obj</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span>                                       <span class="c1">// Returns a string representation of the object.</span>
<span class="nx">object</span><span class="p">.</span><span class="nf">valueOf</span><span class="p">()</span>                                     <span class="c1">// Returns the primitive value of the specified object.</span>
</code></pre></div></div> <h4 id="global-objects--array">GLOBAL OBJECTS &gt; ARRAY</h4> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">Mozilla</a></p> <p>Global object: properties</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Array</span><span class="p">.</span><span class="nx">length</span>                                         <span class="c1">// Reflects the number of elements in an array.</span>
<span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span>                                      <span class="c1">// Represents the prototype for the Array constructor and allows to add new properties and methods to all Array objects.</span>
</code></pre></div></div> <p>Global object: methods</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">arrayLike</span><span class="p">[,</span> <span class="nx">mapFn</span><span class="p">[,</span> <span class="nx">thisArg</span><span class="p">]])</span>            <span class="c1">// Creates a new Array instance from an array-like or iterable object.</span>
<span class="nb">Array</span><span class="p">.</span><span class="nf">isArray</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>                                   <span class="c1">// Returns true if a variable is an array, if not false.</span>
<span class="nb">Array</span><span class="p">.</span><span class="k">of</span><span class="p">(</span><span class="nx">element0</span><span class="p">[,</span> <span class="nx">element1</span><span class="p">[,</span> <span class="p">...[,</span> <span class="nx">elementN</span><span class="p">]]])</span>    <span class="c1">// Creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.</span>
</code></pre></div></div> <p>Instance: properties</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span>                                           <span class="c1">// Reflects the number of elements in an array.</span>
</code></pre></div></div> <p>Instance: mutator methods</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">arr</span><span class="p">.</span><span class="nf">copyWithin</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">start</span><span class="p">,</span> <span class="nx">end</span><span class="p">)</span>                   <span class="c1">// Copies a sequence of array elements within the array.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">fill</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">start</span><span class="p">,</span> <span class="nx">end</span><span class="p">)</span>                          <span class="c1">// Fills all the elements of an array from a start index to an end index with a static value.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>                                            <span class="c1">// Removes the last element from an array and returns that element.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">flat</span><span class="p">()</span>                                           <span class="c1">// merges nested array into one single array</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">push</span><span class="p">([</span><span class="nx">element1</span><span class="p">[,</span> <span class="p">...[,</span> <span class="nx">elementN</span><span class="p">]]])</span>              <span class="c1">// Adds one or more elements to the end of an array and returns the new length of the array.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">reverse</span><span class="p">()</span>                                        <span class="c1">// Reverses the order of the elements of an array in place — the first becomes the last, and the last becomes the first.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">shift</span><span class="p">()</span>                                          <span class="c1">// Removes the first element from an array and returns that element.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>                                           <span class="c1">// Sorts the elements of an array in place and returns the array.</span>
<span class="nx">array</span><span class="p">.</span><span class="nf">splice</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">deleteCount</span><span class="p">,</span> <span class="nx">item1</span><span class="p">,</span> <span class="nx">item2</span><span class="p">,</span> <span class="p">...)</span>  <span class="c1">// Adds and/or removes elements from an array.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">unshift</span><span class="p">([</span><span class="nx">element1</span><span class="p">[,</span> <span class="p">...[,</span> <span class="nx">elementN</span><span class="p">]]])</span>           <span class="c1">// Adds one or more elements to the front of an array and returns the new length of the array.</span>
</code></pre></div></div> <p>Instance: accessor methods</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">arr</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>                                        <span class="c1">// Returns the element at the specified index in the array.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">concat</span><span class="p">(</span><span class="nx">value1</span><span class="p">[,</span> <span class="nx">value2</span><span class="p">[,</span> <span class="p">...[,</span> <span class="nx">valueN</span><span class="p">]]])</span>        <span class="c1">// Returns a new array comprised of this array joined with other array(s) and/or value(s).</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="nx">searchElement</span><span class="p">,</span> <span class="nx">fromIndex</span><span class="p">)</span>               <span class="c1">// Determines whether an array contains a certain element, returning true or false as appropriate.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">indexOf</span><span class="p">(</span><span class="nx">searchElement</span><span class="p">[,</span> <span class="nx">fromIndex</span><span class="p">])</span>              <span class="c1">// Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">separator</span><span class="p">)</span>                                  <span class="c1">// Joins all elements of an array into a string.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">lastIndexOf</span><span class="p">(</span><span class="nx">searchElement</span><span class="p">,</span> <span class="nx">fromIndex</span><span class="p">)</span>            <span class="c1">// Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="nx">begin</span><span class="p">,</span> <span class="nx">end</span><span class="p">)</span>                                <span class="c1">// Extracts a section of an array and returns a new array.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span>                                       <span class="c1">// Returns a string representing the array and its elements. Overrides the Object.prototype.toString() method.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">toLocaleString</span><span class="p">(</span><span class="nx">locales</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>                 <span class="c1">// Returns a localized string representing the array and its elements. Overrides the Object.prototype.toLocaleString() method.</span>
</code></pre></div></div> <p>Instance: iteration methods</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">arr</span><span class="p">.</span><span class="nf">entries</span><span class="p">()</span>                                        <span class="c1">// Returns a new Array Iterator object that contains the key/value pairs for each index in the array.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">every</span><span class="p">(</span><span class="nx">callback</span><span class="p">[,</span> <span class="nx">thisArg</span><span class="p">])</span>                       <span class="c1">// Returns true if every element in this array satisfies the provided testing function.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="nx">callback</span><span class="p">[,</span> <span class="nx">thisArg</span><span class="p">])</span>                      <span class="c1">// Creates a new array with all of the elements of this array for which the provided filtering function returns true.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="nx">callback</span><span class="p">[,</span> <span class="nx">thisArg</span><span class="p">])</span>                        <span class="c1">// Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">findIndex</span><span class="p">(</span><span class="nx">callback</span><span class="p">[,</span> <span class="nx">thisArg</span><span class="p">])</span>                   <span class="c1">// Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">callback</span><span class="p">[,</span> <span class="nx">thisArg</span><span class="p">])</span>                     <span class="c1">// Calls a function for each element in the array.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">keys</span><span class="p">()</span>                                           <span class="c1">// Returns a new Array Iterator that contains the keys for each index in the array.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">callback</span><span class="p">[,</span> <span class="nx">initialValue</span><span class="p">])</span>                    <span class="c1">// Creates a new array with the results of calling a provided function on every element in this array.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">reduce</span><span class="p">(</span><span class="nx">callback</span><span class="p">[,</span> <span class="nx">initialValue</span><span class="p">])</span>                 <span class="c1">// Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">reduceRight</span><span class="p">(</span><span class="nx">callback</span><span class="p">[,</span> <span class="nx">initialValue</span><span class="p">])</span>            <span class="c1">// Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">some</span><span class="p">(</span><span class="nx">callback</span><span class="p">[,</span> <span class="nx">initialValue</span><span class="p">])</span>                   <span class="c1">// Returns true if at least one element in this array satisfies the provided testing function.</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">values</span><span class="p">()</span>                                         <span class="c1">// Returns a new Array Iterator object that contains the values for each index in the array.</span>
</code></pre></div></div> <p>Originated from <a href="https://github.com/LeCoupa/awesome-cheatsheets">github</a></p>]]></content><author><name></name></author><category term="code"/><category term="javascript"/><category term="code"/><summary type="html"><![CDATA[Collection of most used and useful javaScript functions and methods.]]></summary></entry></feed>